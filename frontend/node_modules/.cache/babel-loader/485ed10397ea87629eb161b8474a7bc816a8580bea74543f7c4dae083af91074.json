{"ast":null,"code":"var _jsxFileName = \"/home/user/AdvWebDevelopmentProject/frontend/src/PlayerViewPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { FaChevronUp, FaChevronDown, FaEdit, FaTimes } from 'react-icons/fa';\n//import \"./PlayerViewPage.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PlayerViewPage = ({\n  campaignId: propCampaignId,\n  profileId: propProfileId\n}) => {\n  _s();\n  var _editedProfile$skills, _editedProfile$profic, _editedProfile$equipm, _editedProfile$magic_, _editedProfile$money, _editedProfile$spellc, _editedProfile$attack;\n  const navigate = useNavigate();\n\n  // Use props if available, otherwise fallback to useParams\n  const params = useParams();\n  const campaignId = propCampaignId || params.campaignId;\n  const profileId = propProfileId || params.profileId;\n  const [profile, setProfile] = useState(null);\n  const [gameLog, setGameLog] = useState({\n    discoveries: [],\n    battles: [],\n    notes: []\n  });\n  const [expandedSections, setExpandedSections] = useState({\n    discoveries: false,\n    battles: false,\n    notes: false\n  });\n  const [isEditing, setIsEditing] = useState(false);\n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [editedProfile, setEditedProfile] = useState(null);\n  const [newNote, setNewNote] = useState('');\n  const [newBattle, setNewBattle] = useState('');\n  const [newDiscovery, setNewDiscovery] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [newSkill, setNewSkill] = useState('');\n  const [newProficiency, setNewProficiency] = useState('');\n  const [newEquipment, setNewEquipment] = useState('');\n  const [newMagicItem, setNewMagicItem] = useState('');\n  const [newMoney, setNewMoney] = useState('');\n  const [newSpellcasting, setNewSpellcasting] = useState('');\n  const [newAttackRoll, setNewAttackRoll] = useState('');\n  useEffect(() => {\n    const fetchPlayerData = async () => {\n      try {\n        const profileResponse = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}`);\n        if (!profileResponse.ok) throw new Error('Failed to fetch profile');\n        const profileData = await profileResponse.json();\n\n        // Make sure to initialize skills as an empty array if it's undefined\n        setProfile(profileData);\n        setEditedProfile({\n          ...profileData\n        });\n        setGameLog({\n          discoveries: profileData.discoveries || [],\n          battles: profileData.battles || [],\n          notes: profileData.notes || []\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    if (campaignId && profileId) {\n      fetchPlayerData();\n    } else {\n      setError(\"Campaign ID or Profile ID is missing\");\n      setLoading(false);\n    }\n  }, [campaignId, profileId]);\n  const toggleSection = section => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n  const toggleEditMode = () => {\n    setIsEditing(!isEditing);\n  };\n  const handleAddItem = async (section, newItem) => {\n    if (!newItem.trim()) return;\n    const updatedGameLog = {\n      ...gameLog,\n      [section]: [...gameLog[section], newItem]\n    };\n    setGameLog(updatedGameLog);\n    await saveGameLog(updatedGameLog);\n    if (section === 'notes') setNewNote('');else if (section === 'battles') setNewBattle('');else if (section === 'discoveries') setNewDiscovery('');\n  };\n  const handleDeleteItem = async (section, index) => {\n    const updatedItems = gameLog[section].filter((_, i) => i !== index);\n    const updatedGameLog = {\n      ...gameLog,\n      [section]: updatedItems\n    };\n    setGameLog(updatedGameLog);\n    await saveGameLog(updatedGameLog);\n  };\n  const handleUpdateItem = async (section, index, updatedItem) => {\n    const updatedItems = gameLog[section].map((item, i) => i === index ? updatedItem : item);\n    const updatedGameLog = {\n      ...gameLog,\n      [section]: updatedItems\n    };\n    setGameLog(updatedGameLog);\n\n    // Save changes to the backend\n    await saveGameLog(updatedGameLog);\n  };\n  const saveGameLog = async updatedGameLog => {\n    try {\n      const response = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}/gamelog`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedGameLog)\n      });\n      if (!response.ok) throw new Error(\"Failed to save game log\");\n    } catch (error) {\n      console.error('Error saving game log:', error);\n    }\n  };\n  const handleBackToCampaigns = () => {\n    navigate('/');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player-view\",\n    children: [profile && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"profile-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Character Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Profile-Info-Grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedProfile.name,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              name: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 33\n          }, this) : profile.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Class:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 29\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedProfile.class,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              class: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this) : profile.class]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Race:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editedProfile.race,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              race: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 33\n          }, this) : profile.race]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"profile-field\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: editedProfile.level,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              level: parseInt(e.target.value) || 0\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this) : profile.level]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Attributes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attribute-grid\",\n        children: [\"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"].map(attr => {\n          const fullAttr = {\n            STR: 'strength',\n            DEX: 'dexterity',\n            CON: 'constitution',\n            INT: 'intelligence',\n            WIS: 'wisdom',\n            CHA: 'charisma'\n          }[attr];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"attribute-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [attr, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 44\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 37\n            }, this), isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: editedProfile[fullAttr],\n              onChange: e => setEditedProfile({\n                ...editedProfile,\n                [fullAttr]: parseInt(e.target.value) || 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              children: profile[fullAttr]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 41\n            }, this)]\n          }, attr, true, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Combat Stats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"combat-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"AC:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 28\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: editedProfile.ac,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              ac: parseInt(e.target.value) || 0\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this) : profile.ac]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Init Mod:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 28\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: editedProfile.initiative_modifier,\n            onChange: e => setEditedProfile({\n              ...editedProfile,\n              initiative_modifier: parseInt(e.target.value) || 0\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this) : profile.initiative_modifier]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"HP:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 28\n          }, this), \" \", isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: editedProfile.current_hp,\n              onChange: e => setEditedProfile({\n                ...editedProfile,\n                current_hp: parseInt(e.target.value) || 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 33\n            }, this), \" /\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: editedProfile.max_hp,\n              onChange: e => setEditedProfile({\n                ...editedProfile,\n                max_hp: parseInt(e.target.value) || 0\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : `${profile.current_hp}/${profile.max_hp}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"extended-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Modifiers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"attributes-modifiers\",\n          children: [\"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"].map(attr => {\n            const fullAttr = {\n              STR: 'strength_modifier',\n              DEX: 'dexterity_modifier',\n              CON: 'constitution_modifier',\n              INT: 'intelligence_modifier',\n              WIS: 'wisdom_modifier',\n              CHA: 'charisma_modifier'\n            }[attr];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modifier-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [attr, \" Mod:\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 41\n              }, this), isEditingProfile ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                value: editedProfile[fullAttr] // Use fullAttr to map correctly\n                ,\n                onChange: e => setEditedProfile({\n                  ...editedProfile,\n                  [fullAttr]: parseInt(e.target.value) || 0 // Save correctly on edit\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 233,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                children: profile[fullAttr]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 45\n              }, this) // Display the correct modifier\n              ]\n            }, attr, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 37\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Skills\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$skills = editedProfile.skills) === null || _editedProfile$skills === void 0 ? void 0 : _editedProfile$skills.length) > 0 ? editedProfile.skills.map((skill, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: skill,\n                onChange: e => {\n                  const updated = [...editedProfile.skills];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    skills: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.skills];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    skills: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : skill\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No skills listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-skill-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newSkill // Bind the value of the input to the `newSkill` state\n            ,\n            onChange: e => setNewSkill(e.target.value) // Update the state on input change\n            ,\n            placeholder: \"Enter new skill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newSkill.trim()) {\n                // Add the new skill to the skills list\n                setEditedProfile({\n                  ...editedProfile,\n                  skills: [...editedProfile.skills, newSkill.trim()]\n                });\n                setNewSkill(''); // Clear the input after adding the skill\n              }\n            },\n            children: \"Add Skill\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Proficiencies\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$profic = editedProfile.proficiencies) === null || _editedProfile$profic === void 0 ? void 0 : _editedProfile$profic.length) > 0 ? editedProfile.proficiencies.map((prof, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.proficiencies[index],\n                onChange: e => {\n                  const updated = [...editedProfile.proficiencies];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    proficiencies: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.proficiencies];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    proficiencies: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 321,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : prof\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No proficiencies listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-proficiency-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newProficiency // Bind the value of the input to the `newProficiency` state\n            ,\n            onChange: e => setNewProficiency(e.target.value) // Update the state on input change\n            ,\n            placeholder: \"Enter new proficiency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newProficiency.trim()) {\n                // Add the new proficiency to the proficiencies list\n                setEditedProfile({\n                  ...editedProfile,\n                  proficiencies: [...editedProfile.proficiencies, newProficiency.trim()]\n                });\n                setNewProficiency(''); // Clear the input after adding the proficiency\n              }\n            },\n            children: \"Add Proficiency\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Equipment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$equipm = editedProfile.equipment) === null || _editedProfile$equipm === void 0 ? void 0 : _editedProfile$equipm.length) > 0 ? editedProfile.equipment.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.equipment[index],\n                onChange: e => {\n                  const updated = [...editedProfile.equipment];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    equipment: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.equipment];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    equipment: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 377,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No equipment listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-equipment-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newEquipment // Bind the value of the input to the `newEquipment` state\n            ,\n            onChange: e => setNewEquipment(e.target.value) // Update the state on input change\n            ,\n            placeholder: \"Enter new equipment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newEquipment.trim()) {\n                // Add the new equipment to the equipment list\n                setEditedProfile({\n                  ...editedProfile,\n                  equipment: [...editedProfile.equipment, newEquipment.trim()]\n                });\n                setNewEquipment(''); // Clear the input after adding the equipment\n              }\n            },\n            children: \"Add Equipment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Magic Items\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$magic_ = editedProfile.magic_items) === null || _editedProfile$magic_ === void 0 ? void 0 : _editedProfile$magic_.length) > 0 ? editedProfile.magic_items.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.magic_items[index],\n                onChange: e => {\n                  const updated = [...editedProfile.magic_items];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    magic_items: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.magic_items];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    magic_items: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : item\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No magic items listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-magic-item-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMagicItem // Bound to the newMagicItem state\n            ,\n            onChange: e => setNewMagicItem(e.target.value) // Update on input change\n            ,\n            placeholder: \"Enter new magic item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newMagicItem.trim()) {\n                setEditedProfile({\n                  ...editedProfile,\n                  magic_items: [...editedProfile.magic_items, newMagicItem.trim()]\n                });\n                setNewMagicItem(''); // Clear input after adding\n              }\n            },\n            children: \"Add Magic Item\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Money\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$money = editedProfile.money) === null || _editedProfile$money === void 0 ? void 0 : _editedProfile$money.length) > 0 ? editedProfile.money.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.money[index],\n                onChange: e => {\n                  const updated = [...editedProfile.money];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    money: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.money];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    money: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : entry\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No money listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-money-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMoney // Bound to the newMoney state\n            ,\n            onChange: e => setNewMoney(e.target.value) // Update on input change\n            ,\n            placeholder: \"Enter new money entry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newMoney.trim()) {\n                setEditedProfile({\n                  ...editedProfile,\n                  money: [...editedProfile.money, newMoney.trim()]\n                });\n                setNewMoney(''); // Clear input after adding\n              }\n            },\n            children: \"Add Money\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Spellcasting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$spellc = editedProfile.spellcasting) === null || _editedProfile$spellc === void 0 ? void 0 : _editedProfile$spellc.length) > 0 ? editedProfile.spellcasting.map((entry, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.spellcasting[index],\n                onChange: e => {\n                  const updated = [...editedProfile.spellcasting];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    spellcasting: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.spellcasting];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    spellcasting: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : entry\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No spellcasting data.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-spellcasting-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newSpellcasting // Bound to newSpellcasting state\n            ,\n            onChange: e => setNewSpellcasting(e.target.value) // Update on input change\n            ,\n            placeholder: \"Enter new spellcasting entry\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newSpellcasting.trim()) {\n                setEditedProfile({\n                  ...editedProfile,\n                  spellcasting: [...editedProfile.spellcasting, newSpellcasting.trim()]\n                });\n                setNewSpellcasting(''); // Clear input after adding\n              }\n            },\n            children: \"Add Spellcasting\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Attack Rolls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: ((_editedProfile$attack = editedProfile.attack_rolls) === null || _editedProfile$attack === void 0 ? void 0 : _editedProfile$attack.length) > 0 ? editedProfile.attack_rolls.map((roll, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editedProfile.attack_rolls[index],\n                onChange: e => {\n                  const updated = [...editedProfile.attack_rolls];\n                  updated[index] = e.target.value;\n                  setEditedProfile({\n                    ...editedProfile,\n                    attack_rolls: updated\n                  });\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 589,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => {\n                  const updated = [...editedProfile.attack_rolls];\n                  updated.splice(index, 1);\n                  setEditedProfile({\n                    ...editedProfile,\n                    attack_rolls: updated\n                  });\n                },\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 598,\n                columnNumber: 49\n              }, this)]\n            }, void 0, true) : roll\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 37\n          }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No attack rolls listed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 25\n        }, this), isEditingProfile && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"add-attack-roll-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newAttackRoll // Bound to newAttackRoll state\n            ,\n            onChange: e => setNewAttackRoll(e.target.value) // Update on input change\n            ,\n            placeholder: \"Enter new attack roll\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              if (newAttackRoll.trim()) {\n                setEditedProfile({\n                  ...editedProfile,\n                  attack_rolls: [...editedProfile.attack_rolls, newAttackRoll.trim()]\n                });\n                setNewAttackRoll(''); // Clear input after adding\n              }\n            },\n            children: \"Add Attack Roll\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: async () => {\n          if (isEditingProfile) {\n            try {\n              const transformedProfile = {\n                ...editedProfile\n              };\n              console.log(transformedProfile);\n              const res = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}/update`, {\n                method: 'PATCH',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(transformedProfile)\n              });\n              if (!res.ok) throw new Error(\"Failed to save profile changes\");\n              setProfile(editedProfile); // Commit changes\n            } catch (error) {\n              console.error(\"Error updating profile:\", error);\n            }\n          } else {\n            setEditedProfile({\n              ...profile\n            }); // Prepare editable copy\n          }\n          setIsEditingProfile(!isEditingProfile); // Toggle mode\n        },\n        className: \"modify-stats-button\",\n        children: isEditingProfile ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"\\uD83D\\uDCBE Save Changes\"\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 670,\n            columnNumber: 70\n          }, this), \" Modify Stats\"]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-log\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Game Log\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }, this), ['discoveries', 'battles', 'notes'].map(section => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-log-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          onClick: () => toggleSection(section),\n          style: {\n            cursor: 'pointer'\n          },\n          children: [section.charAt(0).toUpperCase() + section.slice(1), expandedSections[section] ? /*#__PURE__*/_jsxDEV(FaChevronUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 58\n          }, this) : /*#__PURE__*/_jsxDEV(FaChevronDown, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 76\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 25\n        }, this), expandedSections[section] && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            children: gameLog[section].map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                  value: item,\n                  onChange: e => handleUpdateItem(section, index, e.target.value),\n                  rows: \"4\",\n                  cols: \"50\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 691,\n                  columnNumber: 53\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleDeleteItem(section, index),\n                  children: \"Delete\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 697,\n                  columnNumber: 53\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 49\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                children: item.split('\\n').map((paragraph, i) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: paragraph\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 94\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 49\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 688,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 33\n          }, this), isEditing && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: section === 'notes' ? newNote : section === 'battles' ? newBattle : newDiscovery,\n              onChange: e => {\n                if (section === 'notes') setNewNote(e.target.value);else if (section === 'battles') setNewBattle(e.target.value);else setNewDiscovery(e.target.value);\n              },\n              rows: \"4\",\n              cols: \"50\",\n              placeholder: `Enter ${section === 'discoveries' ? 'discovery' : section.slice(0, -1)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 707,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleAddItem(section, section === 'notes' ? newNote : section === 'battles' ? newBattle : newDiscovery),\n              disabled: !newNote.trim() && !newBattle.trim() && !newDiscovery.trim(),\n              children: [\"Add \", section === 'notes' ? 'Note' : section === 'battles' ? 'Battle' : 'Discovery']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 718,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 706,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 29\n        }, this)]\n      }, section, true, {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: isEditing ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleEditMode,\n          className: \"exit-edit-button\",\n          children: [/*#__PURE__*/_jsxDEV(FaTimes, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 29\n          }, this), \" Exit Edit Mode\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleEditMode,\n          className: \"edit-button\",\n          children: [/*#__PURE__*/_jsxDEV(FaEdit, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 29\n          }, this), \" Edit Game Log\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 731,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBackToCampaigns,\n        className: \"campaigns-button\",\n        children: \"Back to Campaigns\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 676,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n};\n_s(PlayerViewPage, \"06myp8WCW+00HueJLK9C7rDmwDQ=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = PlayerViewPage;\nexport default PlayerViewPage;\nvar _c;\n$RefreshReg$(_c, \"PlayerViewPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","FaChevronUp","FaChevronDown","FaEdit","FaTimes","jsxDEV","_jsxDEV","Fragment","_Fragment","PlayerViewPage","campaignId","propCampaignId","profileId","propProfileId","_s","_editedProfile$skills","_editedProfile$profic","_editedProfile$equipm","_editedProfile$magic_","_editedProfile$money","_editedProfile$spellc","_editedProfile$attack","navigate","params","profile","setProfile","gameLog","setGameLog","discoveries","battles","notes","expandedSections","setExpandedSections","isEditing","setIsEditing","isEditingProfile","setIsEditingProfile","editedProfile","setEditedProfile","newNote","setNewNote","newBattle","setNewBattle","newDiscovery","setNewDiscovery","loading","setLoading","error","setError","newSkill","setNewSkill","newProficiency","setNewProficiency","newEquipment","setNewEquipment","newMagicItem","setNewMagicItem","newMoney","setNewMoney","newSpellcasting","setNewSpellcasting","newAttackRoll","setNewAttackRoll","fetchPlayerData","profileResponse","fetch","ok","Error","profileData","json","message","toggleSection","section","prev","toggleEditMode","handleAddItem","newItem","trim","updatedGameLog","saveGameLog","handleDeleteItem","index","updatedItems","filter","_","i","handleUpdateItem","updatedItem","map","item","response","method","headers","body","JSON","stringify","console","handleBackToCampaigns","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","name","onChange","e","target","class","race","level","parseInt","attr","fullAttr","STR","DEX","CON","INT","WIS","CHA","ac","initiative_modifier","current_hp","max_hp","skills","length","skill","updated","onClick","splice","placeholder","proficiencies","prof","equipment","magic_items","money","entry","spellcasting","attack_rolls","roll","transformedProfile","log","res","style","cursor","charAt","toUpperCase","slice","rows","cols","split","paragraph","disabled","_c","$RefreshReg$"],"sources":["/home/user/AdvWebDevelopmentProject/frontend/src/PlayerViewPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { FaChevronUp, FaChevronDown, FaEdit, FaTimes } from 'react-icons/fa';\n//import \"./PlayerViewPage.css\";\n\nconst PlayerViewPage = ({ campaignId: propCampaignId, profileId: propProfileId }) => {\n    const navigate = useNavigate();\n\n    // Use props if available, otherwise fallback to useParams\n    const params = useParams();\n    const campaignId = propCampaignId || params.campaignId;\n    const profileId = propProfileId || params.profileId;\n\n    const [profile, setProfile] = useState(null);\n    const [gameLog, setGameLog] = useState({ discoveries: [], battles: [], notes: [] });\n    const [expandedSections, setExpandedSections] = useState({ discoveries: false, battles: false, notes: false });\n    const [isEditing, setIsEditing] = useState(false);\n    const [isEditingProfile, setIsEditingProfile] = useState(false);\n    const [editedProfile, setEditedProfile] = useState(null);\n\n    const [newNote, setNewNote] = useState('');\n    const [newBattle, setNewBattle] = useState('');\n    const [newDiscovery, setNewDiscovery] = useState('');\n\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const [newSkill, setNewSkill] = useState('');\n    const [newProficiency, setNewProficiency] = useState('');\n    const [newEquipment, setNewEquipment] = useState('');\n    const [newMagicItem, setNewMagicItem] = useState('');\n    const [newMoney, setNewMoney] = useState('');\n    const [newSpellcasting, setNewSpellcasting] = useState('');\n    const [newAttackRoll, setNewAttackRoll] = useState('');\n\n\n\n    useEffect(() => {\n        const fetchPlayerData = async () => {\n            try {\n                const profileResponse = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}`);\n                if (!profileResponse.ok) throw new Error('Failed to fetch profile');\n                const profileData = await profileResponse.json();\n\n                // Make sure to initialize skills as an empty array if it's undefined\n                setProfile(profileData);\n                setEditedProfile({\n                    ...profileData,\n                });\n                setGameLog({\n                    discoveries: profileData.discoveries || [],\n                    battles: profileData.battles || [],\n                    notes: profileData.notes || [],\n                });\n                setLoading(false);\n            } catch (error) {\n                setError(error.message);\n                setLoading(false);\n            }\n        };\n\n        if (campaignId && profileId) {\n            fetchPlayerData();\n        } else {\n            setError(\"Campaign ID or Profile ID is missing\");\n            setLoading(false);\n        }\n    }, [campaignId, profileId]);\n\n\n\n    const toggleSection = (section) => {\n        setExpandedSections(prev => ({ ...prev, [section]: !prev[section] }));\n    };\n\n    const toggleEditMode = () => {\n        setIsEditing(!isEditing);\n    };\n\n    const handleAddItem = async (section, newItem) => {\n        if (!newItem.trim()) return;\n\n        const updatedGameLog = {\n            ...gameLog,\n            [section]: [...gameLog[section], newItem],\n        };\n\n        setGameLog(updatedGameLog);\n        await saveGameLog(updatedGameLog);\n\n        if (section === 'notes') setNewNote('');\n        else if (section === 'battles') setNewBattle('');\n        else if (section === 'discoveries') setNewDiscovery('');\n    };\n\n    const handleDeleteItem = async (section, index) => {\n        const updatedItems = gameLog[section].filter((_, i) => i !== index);\n        const updatedGameLog = { ...gameLog, [section]: updatedItems };\n\n        setGameLog(updatedGameLog);\n        await saveGameLog(updatedGameLog);\n    };\n\n    const handleUpdateItem = async (section, index, updatedItem) => {\n        const updatedItems = gameLog[section].map((item, i) => (i === index ? updatedItem : item));\n        const updatedGameLog = { ...gameLog, [section]: updatedItems };\n\n        setGameLog(updatedGameLog);\n\n        // Save changes to the backend\n        await saveGameLog(updatedGameLog);\n    };\n\n    const saveGameLog = async (updatedGameLog) => {\n        try {\n            const response = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}/gamelog`, {\n                method: 'PATCH',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(updatedGameLog),\n            });\n            if (!response.ok) throw new Error(\"Failed to save game log\");\n        } catch (error) {\n            console.error('Error saving game log:', error);\n        }\n    };\n\n\n    const handleBackToCampaigns = () => {\n        navigate('/');\n    };\n\n    return (\n        <div className=\"player-view\">\n\n            {/* New section to display character information */}\n            {profile && (\n                <div className=\"profile-section\">\n                    <h2>Character Details</h2>\n\n                    <div className='Profile-Info-Grid'>\n                        <div className='profile-field'>\n                            <strong>Name:</strong> {isEditingProfile ? (\n                                <input type=\"text\" value={editedProfile.name} onChange={(e) => setEditedProfile({ ...editedProfile, name: e.target.value })} />\n                            ) : profile.name}\n                        </div>\n\n                        <div className='profile-field'>\n                            <strong>Class:</strong> {isEditingProfile ? (\n                                <input type=\"text\" value={editedProfile.class} onChange={(e) => setEditedProfile({ ...editedProfile, class: e.target.value })} />\n                            ) : profile.class}\n                        </div>\n\n                        <div className='profile-field'>\n                            <strong>Race:</strong> {isEditingProfile ? (\n                                <input type=\"text\" value={editedProfile.race} onChange={(e) => setEditedProfile({ ...editedProfile, race: e.target.value })} />\n                            ) : profile.race}\n                        </div>\n\n                        <div className='profile-field'>\n                            <strong>Level:</strong> {isEditingProfile ? (\n                                <input type=\"number\" value={editedProfile.level} onChange={(e) => setEditedProfile({ ...editedProfile, level: parseInt(e.target.value) || 0 })} />\n                            ) : profile.level}\n                        </div>\n                    </div>\n\n                    <h3>Attributes</h3>\n                    <div className=\"attribute-grid\">\n                        {[\"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"].map(attr => {\n                            const fullAttr = {\n                                STR: 'strength',\n                                DEX: 'dexterity',\n                                CON: 'constitution',\n                                INT: 'intelligence',\n                                WIS: 'wisdom',\n                                CHA: 'charisma'\n                            }[attr];\n\n                            return (\n                                <div key={attr} className=\"attribute-item\">\n                                    <label><strong>{attr}:</strong></label>\n                                    {isEditingProfile ? (\n                                        <input\n                                            type=\"number\"\n                                            value={editedProfile[fullAttr]}\n                                            onChange={(e) => setEditedProfile({\n                                                ...editedProfile,\n                                                [fullAttr]: parseInt(e.target.value) || 0\n                                            })}\n                                        />\n                                    ) : (\n                                        <span>{profile[fullAttr]}</span>\n                                    )}\n                                </div>\n                            );\n                        })}\n                    </div>\n\n                    <h3>Combat Stats</h3>\n                    <div className=\"combat-stats\">\n                        <p><strong>AC:</strong> {isEditingProfile ? (\n                            <input type=\"number\" value={editedProfile.ac} onChange={(e) => setEditedProfile({ ...editedProfile, ac: parseInt(e.target.value) || 0 })} />\n                        ) : profile.ac}</p>\n\n                        <p><strong>Init Mod:</strong> {isEditingProfile ? (\n                            <input type=\"number\" value={editedProfile.initiative_modifier} onChange={(e) => setEditedProfile({ ...editedProfile, initiative_modifier: parseInt(e.target.value) || 0 })} />\n                        ) : profile.initiative_modifier}</p>\n\n                        <p><strong>HP:</strong> {isEditingProfile ? (\n                            <>\n                                <input type=\"number\" value={editedProfile.current_hp} onChange={(e) => setEditedProfile({ ...editedProfile, current_hp: parseInt(e.target.value) || 0 })} /> /\n                                <input type=\"number\" value={editedProfile.max_hp} onChange={(e) => setEditedProfile({ ...editedProfile, max_hp: parseInt(e.target.value) || 0 })} />\n                            </>\n                        ) : `${profile.current_hp}/${profile.max_hp}`}</p>\n                    </div>\n\n                    <div className=\"extended-stats\">\n                        <h3>Modifiers</h3>\n                        <div className=\"attributes-modifiers\">\n                            {[\"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"].map(attr => {\n                                const fullAttr = {\n                                    STR: 'strength_modifier',\n                                    DEX: 'dexterity_modifier',\n                                    CON: 'constitution_modifier',\n                                    INT: 'intelligence_modifier',\n                                    WIS: 'wisdom_modifier',\n                                    CHA: 'charisma_modifier'\n                                }[attr];\n\n                                return (\n                                    <div key={attr} className=\"modifier-item\">\n                                        <label><strong>{attr} Mod:</strong></label>\n                                        {isEditingProfile ? (\n                                            <input\n                                                type=\"number\"\n                                                value={editedProfile[fullAttr]}  // Use fullAttr to map correctly\n                                                onChange={(e) => setEditedProfile({\n                                                    ...editedProfile,\n                                                    [fullAttr]: parseInt(e.target.value) || 0  // Save correctly on edit\n                                                })}\n                                            />\n                                        ) : (\n                                            <span>{profile[fullAttr]}</span>  // Display the correct modifier\n                                        )}\n                                    </div>\n                                );\n                            })}\n                        </div>\n\n                        <h3>Skills</h3>\n                        <ul>\n                            {editedProfile.skills?.length > 0 ? (\n                                editedProfile.skills.map((skill, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={skill}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.skills];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, skills: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.skills];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, skills: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            skill\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No skills listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new skills */}\n                        {isEditingProfile && (\n                            <div className=\"add-skill-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newSkill}  // Bind the value of the input to the `newSkill` state\n                                    onChange={(e) => setNewSkill(e.target.value)}  // Update the state on input change\n                                    placeholder=\"Enter new skill\"\n                                />\n                                <button onClick={() => {\n                                    if (newSkill.trim()) {\n                                        // Add the new skill to the skills list\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            skills: [...editedProfile.skills, newSkill.trim()],\n                                        });\n                                        setNewSkill(''); // Clear the input after adding the skill\n                                    }\n                                }}>\n                                    Add Skill\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Proficiencies</h3>\n                        <ul>\n                            {editedProfile.proficiencies?.length > 0 ? (\n                                editedProfile.proficiencies.map((prof, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.proficiencies[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.proficiencies];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, proficiencies: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.proficiencies];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, proficiencies: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            prof\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No proficiencies listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new proficiencies */}\n                        {isEditingProfile && (\n                            <div className=\"add-proficiency-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newProficiency}  // Bind the value of the input to the `newProficiency` state\n                                    onChange={(e) => setNewProficiency(e.target.value)}  // Update the state on input change\n                                    placeholder=\"Enter new proficiency\"\n                                />\n                                <button onClick={() => {\n                                    if (newProficiency.trim()) {\n                                        // Add the new proficiency to the proficiencies list\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            proficiencies: [...editedProfile.proficiencies, newProficiency.trim()],\n                                        });\n                                        setNewProficiency(''); // Clear the input after adding the proficiency\n                                    }\n                                }}>\n                                    Add Proficiency\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Equipment</h3>\n                        <ul>\n                            {editedProfile.equipment?.length > 0 ? (\n                                editedProfile.equipment.map((item, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.equipment[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.equipment];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, equipment: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.equipment];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, equipment: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            item\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No equipment listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new equipment */}\n                        {isEditingProfile && (\n                            <div className=\"add-equipment-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newEquipment}  // Bind the value of the input to the `newEquipment` state\n                                    onChange={(e) => setNewEquipment(e.target.value)}  // Update the state on input change\n                                    placeholder=\"Enter new equipment\"\n                                />\n                                <button onClick={() => {\n                                    if (newEquipment.trim()) {\n                                        // Add the new equipment to the equipment list\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            equipment: [...editedProfile.equipment, newEquipment.trim()],\n                                        });\n                                        setNewEquipment(''); // Clear the input after adding the equipment\n                                    }\n                                }}>\n                                    Add Equipment\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Magic Items</h3>\n                        <ul>\n                            {editedProfile.magic_items?.length > 0 ? (\n                                editedProfile.magic_items.map((item, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.magic_items[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.magic_items];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, magic_items: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.magic_items];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, magic_items: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            item\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No magic items listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new magic items */}\n                        {isEditingProfile && (\n                            <div className=\"add-magic-item-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newMagicItem}  // Bound to the newMagicItem state\n                                    onChange={(e) => setNewMagicItem(e.target.value)}  // Update on input change\n                                    placeholder=\"Enter new magic item\"\n                                />\n                                <button onClick={() => {\n                                    if (newMagicItem.trim()) {\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            magic_items: [...editedProfile.magic_items, newMagicItem.trim()],\n                                        });\n                                        setNewMagicItem(''); // Clear input after adding\n                                    }\n                                }}>\n                                    Add Magic Item\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Money</h3>\n                        <ul>\n                            {editedProfile.money?.length > 0 ? (\n                                editedProfile.money.map((entry, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.money[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.money];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, money: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.money];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, money: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            entry\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No money listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new money entries */}\n                        {isEditingProfile && (\n                            <div className=\"add-money-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newMoney}  // Bound to the newMoney state\n                                    onChange={(e) => setNewMoney(e.target.value)}  // Update on input change\n                                    placeholder=\"Enter new money entry\"\n                                />\n                                <button onClick={() => {\n                                    if (newMoney.trim()) {\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            money: [...editedProfile.money, newMoney.trim()],\n                                        });\n                                        setNewMoney(''); // Clear input after adding\n                                    }\n                                }}>\n                                    Add Money\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Spellcasting</h3>\n                        <ul>\n                            {editedProfile.spellcasting?.length > 0 ? (\n                                editedProfile.spellcasting.map((entry, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.spellcasting[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.spellcasting];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, spellcasting: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.spellcasting];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, spellcasting: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            entry\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No spellcasting data.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new spellcasting entries */}\n                        {isEditingProfile && (\n                            <div className=\"add-spellcasting-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newSpellcasting}  // Bound to newSpellcasting state\n                                    onChange={(e) => setNewSpellcasting(e.target.value)}  // Update on input change\n                                    placeholder=\"Enter new spellcasting entry\"\n                                />\n                                <button onClick={() => {\n                                    if (newSpellcasting.trim()) {\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            spellcasting: [...editedProfile.spellcasting, newSpellcasting.trim()],\n                                        });\n                                        setNewSpellcasting(''); // Clear input after adding\n                                    }\n                                }}>\n                                    Add Spellcasting\n                                </button>\n                            </div>\n                        )}\n\n                        <h3>Attack Rolls</h3>\n                        <ul>\n                            {editedProfile.attack_rolls?.length > 0 ? (\n                                editedProfile.attack_rolls.map((roll, index) => (\n                                    <li key={index}>\n                                        {isEditingProfile ? (\n                                            <>\n                                                <input\n                                                    type=\"text\"\n                                                    value={editedProfile.attack_rolls[index]}\n                                                    onChange={(e) => {\n                                                        const updated = [...editedProfile.attack_rolls];\n                                                        updated[index] = e.target.value;\n                                                        setEditedProfile({ ...editedProfile, attack_rolls: updated });\n                                                    }}\n                                                />\n                                                <button onClick={() => {\n                                                    const updated = [...editedProfile.attack_rolls];\n                                                    updated.splice(index, 1);\n                                                    setEditedProfile({ ...editedProfile, attack_rolls: updated });\n                                                }}>🗑️</button>\n                                            </>\n                                        ) : (\n                                            roll\n                                        )}\n                                    </li>\n                                ))\n                            ) : (\n                                <li>No attack rolls listed.</li>\n                            )}\n                        </ul>\n\n                        {/* Add the input field and button to allow adding new attack rolls */}\n                        {isEditingProfile && (\n                            <div className=\"add-attack-roll-container\">\n                                <input\n                                    type=\"text\"\n                                    value={newAttackRoll}  // Bound to newAttackRoll state\n                                    onChange={(e) => setNewAttackRoll(e.target.value)}  // Update on input change\n                                    placeholder=\"Enter new attack roll\"\n                                />\n                                <button onClick={() => {\n                                    if (newAttackRoll.trim()) {\n                                        setEditedProfile({\n                                            ...editedProfile,\n                                            attack_rolls: [...editedProfile.attack_rolls, newAttackRoll.trim()],\n                                        });\n                                        setNewAttackRoll(''); // Clear input after adding\n                                    }\n                                }}>\n                                    Add Attack Roll\n                                </button>\n                            </div>\n                        )}\n\n\n                    </div>\n\n                    <button\n                        onClick={async () => {\n                            if (isEditingProfile) {\n                                try {\n                                    const transformedProfile = {\n                                        ...editedProfile\n                                    };\n\n                                    console.log(transformedProfile);\n\n                                    const res = await fetch(`http://localhost:5001/campaigns/${campaignId}/profiles/${profileId}/update`, {\n                                        method: 'PATCH',\n                                        headers: { 'Content-Type': 'application/json' },\n                                        body: JSON.stringify(transformedProfile),\n                                    });\n\n                                    if (!res.ok) throw new Error(\"Failed to save profile changes\");\n\n                                    setProfile(editedProfile); // Commit changes\n                                } catch (error) {\n                                    console.error(\"Error updating profile:\", error);\n                                }\n                            } else {\n                                setEditedProfile({ ...profile }); // Prepare editable copy\n                            }\n\n                            setIsEditingProfile(!isEditingProfile); // Toggle mode\n                        }}\n                        className=\"modify-stats-button\"\n                    >\n                        {isEditingProfile ? <>💾 Save Changes</> : <><FaEdit /> Modify Stats</>}\n                    </button>\n                </div>\n            )}\n\n\n            <div className=\"game-log\">\n                <h2>Game Log</h2>\n                {['discoveries', 'battles', 'notes'].map((section) => (\n                    <div key={section} className=\"game-log-section\">\n                        <h3 onClick={() => toggleSection(section)} style={{ cursor: 'pointer' }}>\n                            {section.charAt(0).toUpperCase() + section.slice(1)}\n                            {expandedSections[section] ? <FaChevronUp /> : <FaChevronDown />}\n                        </h3>\n                        {expandedSections[section] && (\n                            <div>\n                                <ul>\n                                    {gameLog[section].map((item, index) => (\n                                        <li key={index}>\n                                            {isEditing ? (\n                                                <div>\n                                                    <textarea\n                                                        value={item}\n                                                        onChange={(e) => handleUpdateItem(section, index, e.target.value)}\n                                                        rows=\"4\"\n                                                        cols=\"50\"\n                                                    />\n                                                    <button onClick={() => handleDeleteItem(section, index)}>Delete</button>\n                                                </div>\n                                            ) : (\n                                                <div>{item.split('\\n').map((paragraph, i) => <p key={i}>{paragraph}</p>)}</div>\n                                            )}\n                                        </li>\n                                    ))}\n                                </ul>\n                                {isEditing && (\n                                    <div>\n                                        <textarea\n                                            value={section === 'notes' ? newNote : section === 'battles' ? newBattle : newDiscovery}\n                                            onChange={(e) => {\n                                                if (section === 'notes') setNewNote(e.target.value);\n                                                else if (section === 'battles') setNewBattle(e.target.value);\n                                                else setNewDiscovery(e.target.value);\n                                            }}\n                                            rows=\"4\"\n                                            cols=\"50\"\n                                            placeholder={`Enter ${section === 'discoveries' ? 'discovery' : section.slice(0, -1)}`}\n                                        />\n                                        <button\n                                            onClick={() => handleAddItem(section, section === 'notes' ? newNote : section === 'battles' ? newBattle : newDiscovery)}\n                                            disabled={!newNote.trim() && !newBattle.trim() && !newDiscovery.trim()}\n                                        >\n                                            Add {section === 'notes' ? 'Note' : section === 'battles' ? 'Battle' : 'Discovery'}\n                                        </button>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                    </div>\n                ))}\n                <div className=\"buttons\">\n                    {isEditing ? (\n                        <button onClick={toggleEditMode} className=\"exit-edit-button\">\n                            <FaTimes /> Exit Edit Mode\n                        </button>\n                    ) : (\n                        <button onClick={toggleEditMode} className=\"edit-button\">\n                            <FaEdit /> Edit Game Log\n                        </button>\n                    )}\n                </div>\n                <button onClick={handleBackToCampaigns} className=\"campaigns-button\">\n                    Back to Campaigns\n                </button>\n            </div>\n\n        </div>\n    );\n};\n\nexport default PlayerViewPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,WAAW,EAAEC,aAAa,EAAEC,MAAM,EAAEC,OAAO,QAAQ,gBAAgB;AAC5E;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,UAAU,EAAEC,cAAc;EAAEC,SAAS,EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACjF,MAAMC,QAAQ,GAAGtB,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMuB,MAAM,GAAGxB,SAAS,CAAC,CAAC;EAC1B,MAAMW,UAAU,GAAGC,cAAc,IAAIY,MAAM,CAACb,UAAU;EACtD,MAAME,SAAS,GAAGC,aAAa,IAAIU,MAAM,CAACX,SAAS;EAEnD,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC6B,OAAO,EAAEC,UAAU,CAAC,GAAG9B,QAAQ,CAAC;IAAE+B,WAAW,EAAE,EAAE;IAAEC,OAAO,EAAE,EAAE;IAAEC,KAAK,EAAE;EAAG,CAAC,CAAC;EACnF,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnC,QAAQ,CAAC;IAAE+B,WAAW,EAAE,KAAK;IAAEC,OAAO,EAAE,KAAK;IAAEC,KAAK,EAAE;EAAM,CAAC,CAAC;EAC9G,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACsC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACwC,aAAa,EAAEC,gBAAgB,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4C,SAAS,EAAEC,YAAY,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC8C,YAAY,EAAEC,eAAe,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAM,CAACgD,OAAO,EAAEC,UAAU,CAAC,GAAGjD,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkD,KAAK,EAAEC,QAAQ,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM,CAACoD,QAAQ,EAAEC,WAAW,CAAC,GAAGrD,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACsD,cAAc,EAAEC,iBAAiB,CAAC,GAAGvD,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACwD,YAAY,EAAEC,eAAe,CAAC,GAAGzD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC0D,YAAY,EAAEC,eAAe,CAAC,GAAG3D,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC4D,QAAQ,EAAEC,WAAW,CAAC,GAAG7D,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC8D,eAAe,EAAEC,kBAAkB,CAAC,GAAG/D,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACgE,aAAa,EAAEC,gBAAgB,CAAC,GAAGjE,QAAQ,CAAC,EAAE,CAAC;EAItDC,SAAS,CAAC,MAAM;IACZ,MAAMiE,eAAe,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACA,MAAMC,eAAe,GAAG,MAAMC,KAAK,CAAC,mCAAmCvD,UAAU,aAAaE,SAAS,EAAE,CAAC;QAC1G,IAAI,CAACoD,eAAe,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;QACnE,MAAMC,WAAW,GAAG,MAAMJ,eAAe,CAACK,IAAI,CAAC,CAAC;;QAEhD;QACA5C,UAAU,CAAC2C,WAAW,CAAC;QACvB9B,gBAAgB,CAAC;UACb,GAAG8B;QACP,CAAC,CAAC;QACFzC,UAAU,CAAC;UACPC,WAAW,EAAEwC,WAAW,CAACxC,WAAW,IAAI,EAAE;UAC1CC,OAAO,EAAEuC,WAAW,CAACvC,OAAO,IAAI,EAAE;UAClCC,KAAK,EAAEsC,WAAW,CAACtC,KAAK,IAAI;QAChC,CAAC,CAAC;QACFgB,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAACuB,OAAO,CAAC;QACvBxB,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED,IAAIpC,UAAU,IAAIE,SAAS,EAAE;MACzBmD,eAAe,CAAC,CAAC;IACrB,CAAC,MAAM;MACHf,QAAQ,CAAC,sCAAsC,CAAC;MAChDF,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC,EAAE,CAACpC,UAAU,EAAEE,SAAS,CAAC,CAAC;EAI3B,MAAM2D,aAAa,GAAIC,OAAO,IAAK;IAC/BxC,mBAAmB,CAACyC,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACD,OAAO,GAAG,CAACC,IAAI,CAACD,OAAO;IAAE,CAAC,CAAC,CAAC;EACzE,CAAC;EAED,MAAME,cAAc,GAAGA,CAAA,KAAM;IACzBxC,YAAY,CAAC,CAACD,SAAS,CAAC;EAC5B,CAAC;EAED,MAAM0C,aAAa,GAAG,MAAAA,CAAOH,OAAO,EAAEI,OAAO,KAAK;IAC9C,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC,EAAE;IAErB,MAAMC,cAAc,GAAG;MACnB,GAAGpD,OAAO;MACV,CAAC8C,OAAO,GAAG,CAAC,GAAG9C,OAAO,CAAC8C,OAAO,CAAC,EAAEI,OAAO;IAC5C,CAAC;IAEDjD,UAAU,CAACmD,cAAc,CAAC;IAC1B,MAAMC,WAAW,CAACD,cAAc,CAAC;IAEjC,IAAIN,OAAO,KAAK,OAAO,EAAEhC,UAAU,CAAC,EAAE,CAAC,CAAC,KACnC,IAAIgC,OAAO,KAAK,SAAS,EAAE9B,YAAY,CAAC,EAAE,CAAC,CAAC,KAC5C,IAAI8B,OAAO,KAAK,aAAa,EAAE5B,eAAe,CAAC,EAAE,CAAC;EAC3D,CAAC;EAED,MAAMoC,gBAAgB,GAAG,MAAAA,CAAOR,OAAO,EAAES,KAAK,KAAK;IAC/C,MAAMC,YAAY,GAAGxD,OAAO,CAAC8C,OAAO,CAAC,CAACW,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKJ,KAAK,CAAC;IACnE,MAAMH,cAAc,GAAG;MAAE,GAAGpD,OAAO;MAAE,CAAC8C,OAAO,GAAGU;IAAa,CAAC;IAE9DvD,UAAU,CAACmD,cAAc,CAAC;IAC1B,MAAMC,WAAW,CAACD,cAAc,CAAC;EACrC,CAAC;EAED,MAAMQ,gBAAgB,GAAG,MAAAA,CAAOd,OAAO,EAAES,KAAK,EAAEM,WAAW,KAAK;IAC5D,MAAML,YAAY,GAAGxD,OAAO,CAAC8C,OAAO,CAAC,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEJ,CAAC,KAAMA,CAAC,KAAKJ,KAAK,GAAGM,WAAW,GAAGE,IAAK,CAAC;IAC1F,MAAMX,cAAc,GAAG;MAAE,GAAGpD,OAAO;MAAE,CAAC8C,OAAO,GAAGU;IAAa,CAAC;IAE9DvD,UAAU,CAACmD,cAAc,CAAC;;IAE1B;IACA,MAAMC,WAAW,CAACD,cAAc,CAAC;EACrC,CAAC;EAED,MAAMC,WAAW,GAAG,MAAOD,cAAc,IAAK;IAC1C,IAAI;MACA,MAAMY,QAAQ,GAAG,MAAMzB,KAAK,CAAC,mCAAmCvD,UAAU,aAAaE,SAAS,UAAU,EAAE;QACxG+E,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACjB,cAAc;MACvC,CAAC,CAAC;MACF,IAAI,CAACY,QAAQ,CAACxB,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAChE,CAAC,CAAC,OAAOpB,KAAK,EAAE;MACZiD,OAAO,CAACjD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAGD,MAAMkD,qBAAqB,GAAGA,CAAA,KAAM;IAChC3E,QAAQ,CAAC,GAAG,CAAC;EACjB,CAAC;EAED,oBACIhB,OAAA;IAAK4F,SAAS,EAAC,aAAa;IAAAC,QAAA,GAGvB3E,OAAO,iBACJlB,OAAA;MAAK4F,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5B7F,OAAA;QAAA6F,QAAA,EAAI;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAE1BjG,OAAA;QAAK4F,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAC9B7F,OAAA;UAAK4F,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC1B7F,OAAA;YAAA6F,QAAA,EAAQ;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACpC7B,OAAA;YAAOkG,IAAI,EAAC,MAAM;YAACC,KAAK,EAAEpE,aAAa,CAACqE,IAAK;YAACC,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAEqE,IAAI,EAAEE,CAAC,CAACC,MAAM,CAACJ;YAAM,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC/H/E,OAAO,CAACkF,IAAI;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eAENjG,OAAA;UAAK4F,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC1B7F,OAAA;YAAA6F,QAAA,EAAQ;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACrC7B,OAAA;YAAOkG,IAAI,EAAC,MAAM;YAACC,KAAK,EAAEpE,aAAa,CAACyE,KAAM;YAACH,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAEyE,KAAK,EAAEF,CAAC,CAACC,MAAM,CAACJ;YAAM,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GACjI/E,OAAO,CAACsF,KAAK;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC,eAENjG,OAAA;UAAK4F,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC1B7F,OAAA;YAAA6F,QAAA,EAAQ;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACpC7B,OAAA;YAAOkG,IAAI,EAAC,MAAM;YAACC,KAAK,EAAEpE,aAAa,CAAC0E,IAAK;YAACJ,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAE0E,IAAI,EAAEH,CAAC,CAACC,MAAM,CAACJ;YAAM,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC/H/E,OAAO,CAACuF,IAAI;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC,eAENjG,OAAA;UAAK4F,SAAS,EAAC,eAAe;UAAAC,QAAA,gBAC1B7F,OAAA;YAAA6F,QAAA,EAAQ;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACrC7B,OAAA;YAAOkG,IAAI,EAAC,QAAQ;YAACC,KAAK,EAAEpE,aAAa,CAAC2E,KAAM;YAACL,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAE2E,KAAK,EAAEC,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;YAAE,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAClJ/E,OAAO,CAACwF,KAAK;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAENjG,OAAA;QAAA6F,QAAA,EAAI;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnBjG,OAAA;QAAK4F,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAC1B,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACX,GAAG,CAAC0B,IAAI,IAAI;UACpD,MAAMC,QAAQ,GAAG;YACbC,GAAG,EAAE,UAAU;YACfC,GAAG,EAAE,WAAW;YAChBC,GAAG,EAAE,cAAc;YACnBC,GAAG,EAAE,cAAc;YACnBC,GAAG,EAAE,QAAQ;YACbC,GAAG,EAAE;UACT,CAAC,CAACP,IAAI,CAAC;UAEP,oBACI5G,OAAA;YAAgB4F,SAAS,EAAC,gBAAgB;YAAAC,QAAA,gBACtC7F,OAAA;cAAA6F,QAAA,eAAO7F,OAAA;gBAAA6F,QAAA,GAASe,IAAI,EAAC,GAAC;cAAA;gBAAAd,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,EACtCpE,gBAAgB,gBACb7B,OAAA;cACIkG,IAAI,EAAC,QAAQ;cACbC,KAAK,EAAEpE,aAAa,CAAC8E,QAAQ,CAAE;cAC/BR,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;gBAC9B,GAAGD,aAAa;gBAChB,CAAC8E,QAAQ,GAAGF,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;cAC5C,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC,gBAEFjG,OAAA;cAAA6F,QAAA,EAAO3E,OAAO,CAAC2F,QAAQ;YAAC;cAAAf,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAClC;UAAA,GAbKW,IAAI;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAcT,CAAC;QAEd,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eAENjG,OAAA;QAAA6F,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBjG,OAAA;QAAK4F,SAAS,EAAC,cAAc;QAAAC,QAAA,gBACzB7F,OAAA;UAAA6F,QAAA,gBAAG7F,OAAA;YAAA6F,QAAA,EAAQ;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACrC7B,OAAA;YAAOkG,IAAI,EAAC,QAAQ;YAACC,KAAK,EAAEpE,aAAa,CAACqF,EAAG;YAACf,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAEqF,EAAE,EAAET,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;YAAE,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC5I/E,OAAO,CAACkG,EAAE;QAAA;UAAAtB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEnBjG,OAAA;UAAA6F,QAAA,gBAAG7F,OAAA;YAAA6F,QAAA,EAAQ;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBAC3C7B,OAAA;YAAOkG,IAAI,EAAC,QAAQ;YAACC,KAAK,EAAEpE,aAAa,CAACsF,mBAAoB;YAAChB,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;cAAE,GAAGD,aAAa;cAAEsF,mBAAmB,EAAEV,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;YAAE,CAAC;UAAE;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,GAC9K/E,OAAO,CAACmG,mBAAmB;QAAA;UAAAvB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEpCjG,OAAA;UAAA6F,QAAA,gBAAG7F,OAAA;YAAA6F,QAAA,EAAQ;UAAG;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACpE,gBAAgB,gBACrC7B,OAAA,CAAAE,SAAA;YAAA2F,QAAA,gBACI7F,OAAA;cAAOkG,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAEpE,aAAa,CAACuF,UAAW;cAACjB,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;gBAAE,GAAGD,aAAa;gBAAEuF,UAAU,EAAEX,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;cAAE,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,MAC5J,eAAAjG,OAAA;cAAOkG,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAEpE,aAAa,CAACwF,MAAO;cAAClB,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;gBAAE,GAAGD,aAAa;gBAAEwF,MAAM,EAAEZ,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI;cAAE,CAAC;YAAE;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA,eACtJ,CAAC,GACH,GAAG/E,OAAO,CAACoG,UAAU,IAAIpG,OAAO,CAACqG,MAAM,EAAE;QAAA;UAAAzB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjD,CAAC,eAENjG,OAAA;QAAK4F,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3B7F,OAAA;UAAA6F,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBjG,OAAA;UAAK4F,SAAS,EAAC,sBAAsB;UAAAC,QAAA,EAChC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAACX,GAAG,CAAC0B,IAAI,IAAI;YACpD,MAAMC,QAAQ,GAAG;cACbC,GAAG,EAAE,mBAAmB;cACxBC,GAAG,EAAE,oBAAoB;cACzBC,GAAG,EAAE,uBAAuB;cAC5BC,GAAG,EAAE,uBAAuB;cAC5BC,GAAG,EAAE,iBAAiB;cACtBC,GAAG,EAAE;YACT,CAAC,CAACP,IAAI,CAAC;YAEP,oBACI5G,OAAA;cAAgB4F,SAAS,EAAC,eAAe;cAAAC,QAAA,gBACrC7F,OAAA;gBAAA6F,QAAA,eAAO7F,OAAA;kBAAA6F,QAAA,GAASe,IAAI,EAAC,OAAK;gBAAA;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,EAC1CpE,gBAAgB,gBACb7B,OAAA;gBACIkG,IAAI,EAAC,QAAQ;gBACbC,KAAK,EAAEpE,aAAa,CAAC8E,QAAQ,CAAE,CAAE;gBAAA;gBACjCR,QAAQ,EAAGC,CAAC,IAAKtE,gBAAgB,CAAC;kBAC9B,GAAGD,aAAa;kBAChB,CAAC8E,QAAQ,GAAGF,QAAQ,CAACL,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,IAAI,CAAC,CAAE;gBAC/C,CAAC;cAAE;gBAAAL,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC,gBAEFjG,OAAA;gBAAA6F,QAAA,EAAO3E,OAAO,CAAC2F,QAAQ;cAAC;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,CAAE;cACrC;YAAA,GAbKW,IAAI;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAcT,CAAC;UAEd,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,eAENjG,OAAA;UAAA6F,QAAA,EAAI;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACfjG,OAAA;UAAA6F,QAAA,EACK,EAAApF,qBAAA,GAAAsB,aAAa,CAACyF,MAAM,cAAA/G,qBAAA,uBAApBA,qBAAA,CAAsBgH,MAAM,IAAG,CAAC,GAC7B1F,aAAa,CAACyF,MAAM,CAACtC,GAAG,CAAC,CAACwC,KAAK,EAAE/C,KAAK,kBAClC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEuB,KAAM;gBACbrB,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACyF,MAAM,CAAC;kBACzCG,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEyF,MAAM,EAAEG;kBAAQ,CAAC,CAAC;gBAC3D;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACyF,MAAM,CAAC;kBACzCG,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEyF,MAAM,EAAEG;kBAAQ,CAAC,CAAC;gBAC3D,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHyB;UACH,GApBI/C,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAiB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAC5B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAChC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAExD,QAAS,CAAE;YAAA;YAClB0D,QAAQ,EAAGC,CAAC,IAAK1D,WAAW,CAAC0D,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YAC/C2B,WAAW,EAAC;UAAiB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAChC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAIjF,QAAQ,CAAC4B,IAAI,CAAC,CAAC,EAAE;gBACjB;gBACAvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChByF,MAAM,EAAE,CAAC,GAAGzF,aAAa,CAACyF,MAAM,EAAE7E,QAAQ,CAAC4B,IAAI,CAAC,CAAC;gBACrD,CAAC,CAAC;gBACF3B,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;cACrB;YACJ,CAAE;YAAAiD,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBjG,OAAA;UAAA6F,QAAA,EACK,EAAAnF,qBAAA,GAAAqB,aAAa,CAACgG,aAAa,cAAArH,qBAAA,uBAA3BA,qBAAA,CAA6B+G,MAAM,IAAG,CAAC,GACpC1F,aAAa,CAACgG,aAAa,CAAC7C,GAAG,CAAC,CAAC8C,IAAI,EAAErD,KAAK,kBACxC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACgG,aAAa,CAACpD,KAAK,CAAE;gBAC1C0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACgG,aAAa,CAAC;kBAChDJ,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEgG,aAAa,EAAEJ;kBAAQ,CAAC,CAAC;gBAClE;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACgG,aAAa,CAAC;kBAChDJ,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEgG,aAAa,EAAEJ;kBAAQ,CAAC,CAAC;gBAClE,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEH+B;UACH,GApBIrD,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAwB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QACnC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,2BAA2B;UAAAC,QAAA,gBACtC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAEtD,cAAe,CAAE;YAAA;YACxBwD,QAAQ,EAAGC,CAAC,IAAKxD,iBAAiB,CAACwD,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YACrD2B,WAAW,EAAC;UAAuB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAI/E,cAAc,CAAC0B,IAAI,CAAC,CAAC,EAAE;gBACvB;gBACAvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBgG,aAAa,EAAE,CAAC,GAAGhG,aAAa,CAACgG,aAAa,EAAElF,cAAc,CAAC0B,IAAI,CAAC,CAAC;gBACzE,CAAC,CAAC;gBACFzB,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC;cAC3B;YACJ,CAAE;YAAA+C,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBjG,OAAA;UAAA6F,QAAA,EACK,EAAAlF,qBAAA,GAAAoB,aAAa,CAACkG,SAAS,cAAAtH,qBAAA,uBAAvBA,qBAAA,CAAyB8G,MAAM,IAAG,CAAC,GAChC1F,aAAa,CAACkG,SAAS,CAAC/C,GAAG,CAAC,CAACC,IAAI,EAAER,KAAK,kBACpC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACkG,SAAS,CAACtD,KAAK,CAAE;gBACtC0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACkG,SAAS,CAAC;kBAC5CN,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEkG,SAAS,EAAEN;kBAAQ,CAAC,CAAC;gBAC9D;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACkG,SAAS,CAAC;kBAC5CN,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEkG,SAAS,EAAEN;kBAAQ,CAAC,CAAC;gBAC9D,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHd;UACH,GApBIR,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAoB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAC/B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,yBAAyB;UAAAC,QAAA,gBACpC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAEpD,YAAa,CAAE;YAAA;YACtBsD,QAAQ,EAAGC,CAAC,IAAKtD,eAAe,CAACsD,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YACnD2B,WAAW,EAAC;UAAqB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAI7E,YAAY,CAACwB,IAAI,CAAC,CAAC,EAAE;gBACrB;gBACAvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBkG,SAAS,EAAE,CAAC,GAAGlG,aAAa,CAACkG,SAAS,EAAElF,YAAY,CAACwB,IAAI,CAAC,CAAC;gBAC/D,CAAC,CAAC;gBACFvB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;cACzB;YACJ,CAAE;YAAA6C,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpBjG,OAAA;UAAA6F,QAAA,EACK,EAAAjF,qBAAA,GAAAmB,aAAa,CAACmG,WAAW,cAAAtH,qBAAA,uBAAzBA,qBAAA,CAA2B6G,MAAM,IAAG,CAAC,GAClC1F,aAAa,CAACmG,WAAW,CAAChD,GAAG,CAAC,CAACC,IAAI,EAAER,KAAK,kBACtC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACmG,WAAW,CAACvD,KAAK,CAAE;gBACxC0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACmG,WAAW,CAAC;kBAC9CP,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEmG,WAAW,EAAEP;kBAAQ,CAAC,CAAC;gBAChE;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACmG,WAAW,CAAC;kBAC9CP,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEmG,WAAW,EAAEP;kBAAQ,CAAC,CAAC;gBAChE,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHd;UACH,GApBIR,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAsB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QACjC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,0BAA0B;UAAAC,QAAA,gBACrC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAElD,YAAa,CAAE;YAAA;YACtBoD,QAAQ,EAAGC,CAAC,IAAKpD,eAAe,CAACoD,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YACnD2B,WAAW,EAAC;UAAsB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACrC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAI3E,YAAY,CAACsB,IAAI,CAAC,CAAC,EAAE;gBACrBvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBmG,WAAW,EAAE,CAAC,GAAGnG,aAAa,CAACmG,WAAW,EAAEjF,YAAY,CAACsB,IAAI,CAAC,CAAC;gBACnE,CAAC,CAAC;gBACFrB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;cACzB;YACJ,CAAE;YAAA2C,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACdjG,OAAA;UAAA6F,QAAA,EACK,EAAAhF,oBAAA,GAAAkB,aAAa,CAACoG,KAAK,cAAAtH,oBAAA,uBAAnBA,oBAAA,CAAqB4G,MAAM,IAAG,CAAC,GAC5B1F,aAAa,CAACoG,KAAK,CAACjD,GAAG,CAAC,CAACkD,KAAK,EAAEzD,KAAK,kBACjC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACoG,KAAK,CAACxD,KAAK,CAAE;gBAClC0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACoG,KAAK,CAAC;kBACxCR,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEoG,KAAK,EAAER;kBAAQ,CAAC,CAAC;gBAC1D;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACoG,KAAK,CAAC;kBACxCR,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEoG,KAAK,EAAER;kBAAQ,CAAC,CAAC;gBAC1D,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHmC;UACH,GApBIzD,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAgB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAC3B;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,qBAAqB;UAAAC,QAAA,gBAChC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAEhD,QAAS,CAAE;YAAA;YAClBkD,QAAQ,EAAGC,CAAC,IAAKlD,WAAW,CAACkD,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YAC/C2B,WAAW,EAAC;UAAuB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAIzE,QAAQ,CAACoB,IAAI,CAAC,CAAC,EAAE;gBACjBvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBoG,KAAK,EAAE,CAAC,GAAGpG,aAAa,CAACoG,KAAK,EAAEhF,QAAQ,CAACoB,IAAI,CAAC,CAAC;gBACnD,CAAC,CAAC;gBACFnB,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;cACrB;YACJ,CAAE;YAAAyC,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBjG,OAAA;UAAA6F,QAAA,EACK,EAAA/E,qBAAA,GAAAiB,aAAa,CAACsG,YAAY,cAAAvH,qBAAA,uBAA1BA,qBAAA,CAA4B2G,MAAM,IAAG,CAAC,GACnC1F,aAAa,CAACsG,YAAY,CAACnD,GAAG,CAAC,CAACkD,KAAK,EAAEzD,KAAK,kBACxC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACsG,YAAY,CAAC1D,KAAK,CAAE;gBACzC0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACsG,YAAY,CAAC;kBAC/CV,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEsG,YAAY,EAAEV;kBAAQ,CAAC,CAAC;gBACjE;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACsG,YAAY,CAAC;kBAC/CV,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEsG,YAAY,EAAEV;kBAAQ,CAAC,CAAC;gBACjE,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHmC;UACH,GApBIzD,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAqB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAChC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,4BAA4B;UAAAC,QAAA,gBACvC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE9C,eAAgB,CAAE;YAAA;YACzBgD,QAAQ,EAAGC,CAAC,IAAKhD,kBAAkB,CAACgD,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YACtD2B,WAAW,EAAC;UAA8B;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAIvE,eAAe,CAACkB,IAAI,CAAC,CAAC,EAAE;gBACxBvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBsG,YAAY,EAAE,CAAC,GAAGtG,aAAa,CAACsG,YAAY,EAAEhF,eAAe,CAACkB,IAAI,CAAC,CAAC;gBACxE,CAAC,CAAC;gBACFjB,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;cAC5B;YACJ,CAAE;YAAAuC,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR,eAEDjG,OAAA;UAAA6F,QAAA,EAAI;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrBjG,OAAA;UAAA6F,QAAA,EACK,EAAA9E,qBAAA,GAAAgB,aAAa,CAACuG,YAAY,cAAAvH,qBAAA,uBAA1BA,qBAAA,CAA4B0G,MAAM,IAAG,CAAC,GACnC1F,aAAa,CAACuG,YAAY,CAACpD,GAAG,CAAC,CAACqD,IAAI,EAAE5D,KAAK,kBACvC3E,OAAA;YAAA6F,QAAA,EACKhE,gBAAgB,gBACb7B,OAAA,CAAAE,SAAA;cAAA2F,QAAA,gBACI7F,OAAA;gBACIkG,IAAI,EAAC,MAAM;gBACXC,KAAK,EAAEpE,aAAa,CAACuG,YAAY,CAAC3D,KAAK,CAAE;gBACzC0B,QAAQ,EAAGC,CAAC,IAAK;kBACb,MAAMqB,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACuG,YAAY,CAAC;kBAC/CX,OAAO,CAAChD,KAAK,CAAC,GAAG2B,CAAC,CAACC,MAAM,CAACJ,KAAK;kBAC/BnE,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEuG,YAAY,EAAEX;kBAAQ,CAAC,CAAC;gBACjE;cAAE;gBAAA7B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC,eACFjG,OAAA;gBAAQ4H,OAAO,EAAEA,CAAA,KAAM;kBACnB,MAAMD,OAAO,GAAG,CAAC,GAAG5F,aAAa,CAACuG,YAAY,CAAC;kBAC/CX,OAAO,CAACE,MAAM,CAAClD,KAAK,EAAE,CAAC,CAAC;kBACxB3C,gBAAgB,CAAC;oBAAE,GAAGD,aAAa;oBAAEuG,YAAY,EAAEX;kBAAQ,CAAC,CAAC;gBACjE,CAAE;gBAAA9B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA,eACjB,CAAC,GAEHsC;UACH,GApBI5D,KAAK;YAAAmB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqBV,CACP,CAAC,gBAEFjG,OAAA;YAAA6F,QAAA,EAAI;UAAuB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAClC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC,EAGJpE,gBAAgB,iBACb7B,OAAA;UAAK4F,SAAS,EAAC,2BAA2B;UAAAC,QAAA,gBACtC7F,OAAA;YACIkG,IAAI,EAAC,MAAM;YACXC,KAAK,EAAE5C,aAAc,CAAE;YAAA;YACvB8C,QAAQ,EAAGC,CAAC,IAAK9C,gBAAgB,CAAC8C,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE,CAAE;YAAA;YACpD2B,WAAW,EAAC;UAAuB;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eACFjG,OAAA;YAAQ4H,OAAO,EAAEA,CAAA,KAAM;cACnB,IAAIrE,aAAa,CAACgB,IAAI,CAAC,CAAC,EAAE;gBACtBvC,gBAAgB,CAAC;kBACb,GAAGD,aAAa;kBAChBuG,YAAY,EAAE,CAAC,GAAGvG,aAAa,CAACuG,YAAY,EAAE/E,aAAa,CAACgB,IAAI,CAAC,CAAC;gBACtE,CAAC,CAAC;gBACFf,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;cAC1B;YACJ,CAAE;YAAAqC,QAAA,EAAC;UAEH;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR,CACR;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGA,CAAC,eAENjG,OAAA;QACI4H,OAAO,EAAE,MAAAA,CAAA,KAAY;UACjB,IAAI/F,gBAAgB,EAAE;YAClB,IAAI;cACA,MAAM2G,kBAAkB,GAAG;gBACvB,GAAGzG;cACP,CAAC;cAED2D,OAAO,CAAC+C,GAAG,CAACD,kBAAkB,CAAC;cAE/B,MAAME,GAAG,GAAG,MAAM/E,KAAK,CAAC,mCAAmCvD,UAAU,aAAaE,SAAS,SAAS,EAAE;gBAClG+E,MAAM,EAAE,OAAO;gBACfC,OAAO,EAAE;kBAAE,cAAc,EAAE;gBAAmB,CAAC;gBAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC+C,kBAAkB;cAC3C,CAAC,CAAC;cAEF,IAAI,CAACE,GAAG,CAAC9E,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;cAE9D1C,UAAU,CAACY,aAAa,CAAC,CAAC,CAAC;YAC/B,CAAC,CAAC,OAAOU,KAAK,EAAE;cACZiD,OAAO,CAACjD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;YACnD;UACJ,CAAC,MAAM;YACHT,gBAAgB,CAAC;cAAE,GAAGd;YAAQ,CAAC,CAAC,CAAC,CAAC;UACtC;UAEAY,mBAAmB,CAAC,CAACD,gBAAgB,CAAC,CAAC,CAAC;QAC5C,CAAE;QACF+D,SAAS,EAAC,qBAAqB;QAAAC,QAAA,EAE9BhE,gBAAgB,gBAAG7B,OAAA,CAAAE,SAAA;UAAA2F,QAAA,EAAE;QAAe,gBAAE,CAAC,gBAAG7F,OAAA,CAAAE,SAAA;UAAA2F,QAAA,gBAAE7F,OAAA,CAACH,MAAM;YAAAiG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,iBAAa;QAAA,eAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CACR,eAGDjG,OAAA;MAAK4F,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACrB7F,OAAA;QAAA6F,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAChB,CAAC,aAAa,EAAE,SAAS,EAAE,OAAO,CAAC,CAACf,GAAG,CAAEhB,OAAO,iBAC7ClE,OAAA;QAAmB4F,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC3C7F,OAAA;UAAI4H,OAAO,EAAEA,CAAA,KAAM3D,aAAa,CAACC,OAAO,CAAE;UAACyE,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAU,CAAE;UAAA/C,QAAA,GACnE3B,OAAO,CAAC2E,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG5E,OAAO,CAAC6E,KAAK,CAAC,CAAC,CAAC,EAClDtH,gBAAgB,CAACyC,OAAO,CAAC,gBAAGlE,OAAA,CAACL,WAAW;YAAAmG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAAGjG,OAAA,CAACJ,aAAa;YAAAkG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChE,CAAC,EACJxE,gBAAgB,CAACyC,OAAO,CAAC,iBACtBlE,OAAA;UAAA6F,QAAA,gBACI7F,OAAA;YAAA6F,QAAA,EACKzE,OAAO,CAAC8C,OAAO,CAAC,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAER,KAAK,kBAC9B3E,OAAA;cAAA6F,QAAA,EACKlE,SAAS,gBACN3B,OAAA;gBAAA6F,QAAA,gBACI7F,OAAA;kBACImG,KAAK,EAAEhB,IAAK;kBACZkB,QAAQ,EAAGC,CAAC,IAAKtB,gBAAgB,CAACd,OAAO,EAAES,KAAK,EAAE2B,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAE;kBAClE6C,IAAI,EAAC,GAAG;kBACRC,IAAI,EAAC;gBAAI;kBAAAnD,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACZ,CAAC,eACFjG,OAAA;kBAAQ4H,OAAO,EAAEA,CAAA,KAAMlD,gBAAgB,CAACR,OAAO,EAAES,KAAK,CAAE;kBAAAkB,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACvE,CAAC,gBAENjG,OAAA;gBAAA6F,QAAA,EAAMV,IAAI,CAAC+D,KAAK,CAAC,IAAI,CAAC,CAAChE,GAAG,CAAC,CAACiE,SAAS,EAAEpE,CAAC,kBAAK/E,OAAA;kBAAA6F,QAAA,EAAYsD;gBAAS,GAAbpE,CAAC;kBAAAe,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAgB,CAAC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM;YACjF,GAbItB,KAAK;cAAAmB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAcV,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,EACJtE,SAAS,iBACN3B,OAAA;YAAA6F,QAAA,gBACI7F,OAAA;cACImG,KAAK,EAAEjC,OAAO,KAAK,OAAO,GAAGjC,OAAO,GAAGiC,OAAO,KAAK,SAAS,GAAG/B,SAAS,GAAGE,YAAa;cACxFgE,QAAQ,EAAGC,CAAC,IAAK;gBACb,IAAIpC,OAAO,KAAK,OAAO,EAAEhC,UAAU,CAACoE,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,KAC/C,IAAIjC,OAAO,KAAK,SAAS,EAAE9B,YAAY,CAACkE,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC,CAAC,KACxD7D,eAAe,CAACgE,CAAC,CAACC,MAAM,CAACJ,KAAK,CAAC;cACxC,CAAE;cACF6C,IAAI,EAAC,GAAG;cACRC,IAAI,EAAC,IAAI;cACTnB,WAAW,EAAE,SAAS5D,OAAO,KAAK,aAAa,GAAG,WAAW,GAAGA,OAAO,CAAC6E,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAAG;cAAAjD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1F,CAAC,eACFjG,OAAA;cACI4H,OAAO,EAAEA,CAAA,KAAMvD,aAAa,CAACH,OAAO,EAAEA,OAAO,KAAK,OAAO,GAAGjC,OAAO,GAAGiC,OAAO,KAAK,SAAS,GAAG/B,SAAS,GAAGE,YAAY,CAAE;cACxH+G,QAAQ,EAAE,CAACnH,OAAO,CAACsC,IAAI,CAAC,CAAC,IAAI,CAACpC,SAAS,CAACoC,IAAI,CAAC,CAAC,IAAI,CAAClC,YAAY,CAACkC,IAAI,CAAC,CAAE;cAAAsB,QAAA,GAC1E,MACO,EAAC3B,OAAO,KAAK,OAAO,GAAG,MAAM,GAAGA,OAAO,KAAK,SAAS,GAAG,QAAQ,GAAG,WAAW;YAAA;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9E,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CACR;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CACR;MAAA,GAhDK/B,OAAO;QAAA4B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAkDZ,CACR,CAAC,eACFjG,OAAA;QAAK4F,SAAS,EAAC,SAAS;QAAAC,QAAA,EACnBlE,SAAS,gBACN3B,OAAA;UAAQ4H,OAAO,EAAExD,cAAe;UAACwB,SAAS,EAAC,kBAAkB;UAAAC,QAAA,gBACzD7F,OAAA,CAACF,OAAO;YAAAgG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,mBACf;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,gBAETjG,OAAA;UAAQ4H,OAAO,EAAExD,cAAe;UAACwB,SAAS,EAAC,aAAa;UAAAC,QAAA,gBACpD7F,OAAA,CAACH,MAAM;YAAAiG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,kBACd;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MACX;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,eACNjG,OAAA;QAAQ4H,OAAO,EAAEjC,qBAAsB;QAACC,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAErE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEd,CAAC;AAACzF,EAAA,CAvuBIL,cAAc;EAAA,QACCT,WAAW,EAGbD,SAAS;AAAA;AAAA4J,EAAA,GAJtBlJ,cAAc;AAyuBpB,eAAeA,cAAc;AAAC,IAAAkJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}